{"version":3,"sources":["styles/theme.js","redux/themeReducer.js","redux/action.js","redux/store.js","components/navigation/Header.jsx","configs/routes/Loading.jsx","configs/routes/index.js","App.js","serviceWorker.js","index.js"],"names":["darkTheme","mode","PRIMARY_BACKGROUND_COLOR","PRIMARY_TEXT_COLOR","SECONDARY_TEXT_COLOR","PRIMARY_BUTTON_COLOR","SECONDARY_BUTTON_COLOR","lightTheme","initialState","theme","themeReducer","state","action","type","newState","baseTheme","createStore","StyledHeader","styled","div","props","Div","ThemedLink","Button","ThemedSwitch","Switch","defaultProps","Header","handleChange","goToAboutPage","onClick","checkedChildren","unCheckedChildren","defaultChecked","onChange","antIcon","style","fontSize","spin","options","fallback","className","size","indicator","Home","loadable","About","App","console","log","useState","setTheme","e","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAAaA,EAAY,CACvBC,KAAM,OACNC,yBAA0B,UAC1BC,mBAAoB,UACpBC,qBAAsB,UACtBC,qBAAsB,UACtBC,uBAAwB,WAGbC,EAAa,CACxBN,KAAM,QACNC,yBAA0B,UAC1BC,mBAAoB,UACpBC,qBAAsB,UACtBC,qBAAsB,UACtBC,uBAAwB,WCZpBE,EAAe,CACnBC,MAAM,eAAMF,IAgBCG,EAbM,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACrD,OAAQA,EAAOC,MACb,ICTwB,eDUtB,IAAIC,EAAQ,eACPH,EADO,CAEVF,MAAM,eAAME,EAAMF,MAAb,GAAuBG,EAAOG,aAErC,OAAOD,EACT,QACE,OAAOH,I,GEbEK,YAAYN,G,yhBCI3B,IAAMO,EAAeC,IAAOC,IAAV,KACI,SAAAC,GAAK,OAAIA,EAAMX,MAAMP,4BAUrCmB,EAAMH,IAAOC,IAAV,KAIHG,EAAaJ,YAAOK,IAAPL,CAAH,KACL,SAAAE,GAAK,OAAIA,EAAMX,MAAMN,sBAG1BqB,EAAeN,YAAOO,IAAPP,CAAH,KACI,SAAAE,GAAK,OAAIA,EAAMX,MAAMJ,wBAG3CY,EAAaS,aAAe,CAC1BjB,MAAOT,GAGT,IA0Be2B,EA1BA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,aAAcnB,EAAY,EAAZA,MAGxBoB,EAAgB,aAItB,OACE,kBAAC,IAAD,CAAepB,MAAOA,GACpB,kBAACQ,EAAD,KACE,kBAACI,EAAD,KACE,kBAACC,EAAD,CAAYT,KAAK,OAAOiB,QAAS,kBAAMD,IAAvC,SAGA,kBAACL,EAAD,CACEO,gBAAgB,OAChBC,kBAAkB,QAClBC,gBAAc,EACdC,SAAUN,Q,kDCjDhBO,EAAU,kBAAC,IAAD,CAAMtB,KAAK,UAAUuB,MAAO,CAAEC,SAAU,IAAMC,MAAI,ICArDC,EAAU,CACrBC,SAAU,mBDCG,kBACb,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAMC,KAAK,QAAQC,UAAWR,OCHtB,OCMNS,EAAOC,aAAS,kBAAM,gCAA0BN,GAChDO,EAAQD,aAAS,kBAAM,sDAA2BN,GAgCzCQ,EA9BH,WACVC,QAAQC,IAAIjD,GADI,MAEUkD,mBAASlD,GAFnB,mBAETS,EAFS,KAEF0C,EAFE,KAQhB,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,CAAQb,aANU,SAAAwB,GAChBD,EAAJC,EAAapD,EAAsBO,IAKIE,MAAK,eAAOA,KAEjD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE4C,OAAK,EACLC,KAAK,IACLC,OAAQ,SAAAnC,GAAK,OAAI,kBAACwB,EAAD,iBAAUxB,EAAV,CAAiBX,MAAOA,QAE3C,kBAAC,IAAD,CACE4C,OAAK,EACLC,KAAK,SACLC,OAAQ,SAAAnC,GAAK,OAAI,kBAAC0B,EAAD,iBAAW1B,EAAX,CAAkBX,MAAOA,YCvBlC+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0fb6ca47.chunk.js","sourcesContent":["export const darkTheme = {\n  mode: \"dark\",\n  PRIMARY_BACKGROUND_COLOR: \"#282c34\",\n  PRIMARY_TEXT_COLOR: \"#506680\",\n  SECONDARY_TEXT_COLOR: \"#ffffff\",\n  PRIMARY_BUTTON_COLOR: \"#152642\",\n  SECONDARY_BUTTON_COLOR: \"#506680\"\n};\n\nexport const lightTheme = {\n  mode: \"light\",\n  PRIMARY_BACKGROUND_COLOR: \"#ffefd5\",\n  PRIMARY_TEXT_COLOR: \"#000000\",\n  SECONDARY_TEXT_COLOR: \"#333333\",\n  PRIMARY_BUTTON_COLOR: \"#b9d6f3\",\n  SECONDARY_BUTTON_COLOR: \"#a1c9f1\"\n};\n","import { lightTheme } from \"../styles/theme\";\nimport { SWITCH_THEME } from \"./action\";\n\nconst initialState = {\n  theme: { ...lightTheme }\n};\n\nconst themeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SWITCH_THEME:\n      let newState = {\n        ...state,\n        theme: { ...state.theme, ...action.baseTheme }\n      };\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default themeReducer;\n","export const SWITCH_THEME = \"SWITCH_THEME\";\n\nexport const switchTheme = BaseTheme => {\n  return dispatchEvent => {\n    dispatchEvent({\n      type: SWITCH_THEME,\n      BaseTheme: BaseTheme\n    });\n  };\n};\n","import { createStore } from \"redux\";\nimport themeReducer from \"./themeReducer\";\n\nexport default createStore(themeReducer);\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { Button } from \"antd\";\nimport { Switch } from \"antd\";\nimport { darkTheme } from \"../../styles/theme\";\nimport { useHistory } from \"react-router-dom\";\n\nconst StyledHeader = styled.div`\n  background-color: ${props => props.theme.PRIMARY_BACKGROUND_COLOR};\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: inherit;\n\n  width: 100%;\n`;\n\nconst Div = styled.div`\n  display: inline-block;\n`;\n\nconst ThemedLink = styled(Button)`\n  color: ${props => props.theme.PRIMARY_TEXT_COLOR};\n`;\n\nconst ThemedSwitch = styled(Switch)`\n  background-color: ${props => props.theme.PRIMARY_BUTTON_COLOR};\n`;\n\nStyledHeader.defaultProps = {\n  theme: darkTheme\n};\n\nconst Header = ({ handleChange, theme }) => {\n  //let history = useHistory();\n\n  const goToAboutPage = () => {\n    //history.push(\"/about\");\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <StyledHeader>\n        <Div>\n          <ThemedLink type=\"link\" onClick={() => goToAboutPage}>\n            About\n          </ThemedLink>\n          <ThemedSwitch\n            checkedChildren=\"dark\"\n            unCheckedChildren=\"light\"\n            defaultChecked\n            onChange={handleChange}\n          />\n        </Div>\n      </StyledHeader>\n    </ThemeProvider>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Spin, Icon } from \"antd\";\n\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 70 }} spin />;\n\nexport default () => (\n  <div className=\"loader\">\n    <Spin size=\"large\" indicator={antIcon} />\n  </div>\n);\n","import React from \"react\";\nimport Loading from \"./Loading\";\n\nexport const options = {\n  fallback: <Loading />\n};\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/navigation/Header\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport loadable from \"@loadable/component\";\nimport { options } from \"./configs/routes\";\nimport { darkTheme, lightTheme } from \"./styles/theme\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nconst Home = loadable(() => import(\"./screens/Home\"), options);\nconst About = loadable(() => import(\"./screens/About\"), options);\n\nconst App = () => {\n  console.log(darkTheme);\n  const [theme, setTheme] = useState(darkTheme);\n\n  const onThemeChange = e => {\n    e ? setTheme(darkTheme) : setTheme(lightTheme);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header handleChange={onThemeChange} theme={{ ...theme }} />\n\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={props => <Home {...props} theme={theme} />}\n          />\n          <Route\n            exact\n            path=\"/about\"\n            render={props => <About {...props} theme={theme} />}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}